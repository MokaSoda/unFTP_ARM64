#
# References:
#  - https://github.com/marketplace/actions/get-the-latest-release-upload-url-tag-date
#  - https://github.com/actions/upload-artifact
#  - https://github.com/marketplace/actions/yet-another-upload-release-asset-action
#  - https://github.com/marketplace/actions/download-a-build-artifact
#

# Its called 'build' so that the README badge displays nicely
name: build

# Update the RUST_VERSION here and in the Makefile when we upgrade
env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.78.0

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types: [ created ]
  workflow_dispatch:

jobs:

  # get_version:
  #   name: Get unFTP version
  #   runs-on: ubuntu-latest
  #   outputs:
  #     version: ${{ steps.get_latest_tag.outputs.version }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0  # Otherwise we get a 'fatal: No names found, cannot describe anything.' error.
  #     - name: Get latest tag
  #       id: get_latest_tag
  #       run: |
  #         tag=$(git describe --tags)
  #         echo "version=$tag" >> $GITHUB_OUTPUT

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/master' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          default: true
          components: rustfmt
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Run Clippy
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/master' }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          default: true
          components: clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --workspace -- -D warnings
      
   
   
   
  build-linux-musl:
    runs-on: ubuntu-latest
    name: Build for Linux (MUSL)
    # needs: get_version
    env:
      target: aarch64-unknown-linux-musl
      BUILD_VERSION: ${{ needs.get_version.outputs.version }}
    steps:
      - name: Install Rust Toolchain Components  
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
        
      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
        
      - name: Overwrite build command env variable
        shell: bash
        run: echo "BUILD_CMD=cross" >> $GITHUB_ENV
      
      - name: Checkout code
        uses: actions/checkout@v3
        with:
        
          fetch-depth: 0  # Otherwise the code that retrieves the git version doesn't work
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          default: true
          target: ${{ env.target }}
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      - name: Build for Linux (MUSL)
        run: RUSTFLAGS="-C target-feature=+crt-static" cargo build --no-default-features --features docker --release --target=${{ env.target }}
      - name: Rename
        run: mv target/${{ env.target }}/release/unftp target/${{ env.target }}/release/unftp_${{ env.target }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: unftp_${{ env.target }}
          path: target/${{ env.target }}/release/unftp_${{ env.target }}


  upload-release-binaries:
    if: ${{ github.event_name == 'release' }}  # Testing: if: ${{ github.ref == 'refs/heads/hannes/upload' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build:

          - x86_64-unknown-linux-musl

    env:
      file_name: unftp_${{ matrix.build }}${{ contains(matrix.build, 'windows') && '.exe' || '' }}
      file_dir: ./${{ matrix.build }}
    needs:
      - build-linux-musl

    name: Upload Release Artifacts
    steps:
      # For testing:
      # - name: Gets latest created release info
      #   id: latest_release_info
      #   uses: jossef/action-latest-release-info@v1.2.1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.file_name }}
          path: ${{ env.file_dir }}
      - name: Calculate MD5 checksum
        id: calculate_checksum
        run: md5sum ${{ env.file_dir }}/${{ env.file_name }} > ${{ env.file_dir }}/${{ env.file_name }}.md5
      - name: Upload
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}  # Testing: ${{ steps.latest_release_info.outputs.upload_url }}
          asset_path: ${{ env.file_dir }}/${{ env.file_name }}
          asset_name: ${{ env.file_name }}
          asset_content_type: application/octet-stream
      - name: Upload MD5
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.file_dir }}/${{ env.file_name }}.md5
          asset_name: ${{ env.file_name }}.md5
          asset_content_type: text/plain

